─────────────────────────────────────────────────────────────
1. 헤더 포함부
─────────────────────────────────────────────────────────────
#include "main.h"          // CubeIDE가 자동 만든 MCU 기본 설정
#include "cmsis_os.h"      // FreeRTOS(CMSIS-OS v2) API
#include "adc.h"           // ADC는 데모에서 안 쓰지만 CubeMX 기본 생성
#include "can.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"
#include <string.h>        // memcpy(), memset(), strlen() 쓰기위해 포함
#include <stdio.h>         // snprintf() 때문에 추가

─────────────────────────────────────────────────────────────
2. 매크로 & 데이터 타입
─────────────────────────────────────────────────────────────
#define PMIC_I2C_ADDR (0x48 << 1) // 7-bit 슬레이브 0x48 → HAL은 8-bit 요구
#define EEPROM_DTC_ADDR 0x0000U   // EEPROM 첫 주소
#define CAN_ID_DTC_REQ  0x700U    // Clear DTC 명령
#define CAN_ID_DTC_RESP 0x708U    // DTC 전송용

// PMIC 레지스터 0x00(UV),0x01(OC),0x02(OV) 주소를 enum으로
typedef enum { PMIC_REG_UV=0x00, PMIC_REG_OC=0x01, PMIC_REG_OV=0x02 } PMIC_Reg_t;

// 8바이트 레지스터를 raw/bit 두 방식 모두 접근하기 위한 union
typedef union __attribute__((packed))
{
    uint8_t raw[8];        // 통째로 복사할 때
    struct {               // 세부 비트 접근
        uint8_t uv_flag:1, oc_flag:1, ov_flag:1, reserved1:5;
        uint8_t uv_th, oc_th, ov_th, reserved2[4];
    } bits;
} PMIC_RegFrame_t;

─────────────────────────────────────────────────────────────
3. 전역 핸들 & 변수
─────────────────────────────────────────────────────────────
extern I2C_HandleTypeDef  hi2c1;   // CubeMX가 만든 I2C1 핸들
extern SPI_HandleTypeDef  hspi2;   // SPI2 핸들
extern CAN_HandleTypeDef  hcan1;   // CAN1 핸들
extern UART_HandleTypeDef huart3;  // UART3 핸들

static uint8_t dtc_code[3]   = {0}; // 3바이트 DTC 저장소
static uint8_t pmic_rx_buf[8];      // I2C DMA 수신용 버퍼
static osMutexId_t hMutex;          // 태스크 간 순서를 잡아줄 단일 Mutex

─────────────────────────────────────────────────────────────
4. 함수 프로토타입 (static = 파일 내부 전용)
─────────────────────────────────────────────────────────────
Task_I2C  → PMIC 읽기          (I2C DMA)
Task_SPI  → EEPROM 쓰고 읽기    (SPI DMA)
Task_CAN  → DTC 송출 / Clear    (CAN IRQ)
Task_UART → “ECU OK” 찍기       (UART Polling)

I2C/SPI/CAN/UART를 편하게 쓰기 위한 유틸 함수 4개도 미리 선언.

─────────────────────────────────────────────────────────────
5. main() : 초기화 → RTOS 시작
─────────────────────────────────────────────────────────────
HAL_Init();            // HAL 라이브러리·SysTick 1 ms 준비
SystemClock_Config();  // HSI 16 MHz, PLL OFF  (단순 클럭)

MX_*_Init();           // GPIO, DMA, CAN1, I2C1, SPI2, UART3 초기화

osKernelInitialize();  // FreeRTOS 커널 시작 전 준비
hMutex = osMutexNew(); // Mutex 생성 (이걸 ‘바통’으로 사용)

// 태스크 4개 생성. I2C만 기본 우선순위, 나머지는 Low
osThreadNew(Task_I2C , …);
osThreadNew(Task_SPI , …);
osThreadNew(Task_CAN , …);
osThreadNew(Task_UART, …);

osKernelStart();       // 스케줄러 ON → 이후 while(1)에는 도달 안 함

─────────────────────────────────────────────────────────────
6. Task_I2C  (10 ms 주기)
─────────────────────────────────────────────────────────────
PMIC_ReadReg_DMA(PMIC_REG_UV, &frame); // 8B 읽기 (UV 레지스터지만 한 페이지에 全플래그)

/* 비트필드에서 플래그 꺼내 DTC 코드 변환 */
dtc_code[0] = frame.bits.uv_flag ? 0x12 : 0x00;
dtc_code[1] = frame.bits.oc_flag ? 0x34 : 0x00;
dtc_code[2] = frame.bits.ov_flag ? 0x56 : 0x00;

osMutexRelease(hMutex);   // SPI 태스크 깨우기
osDelay(10);

─────────────────────────────────────────────────────────────
7. Task_SPI  (Mutex 받을 때마다 실행)
─────────────────────────────────────────────────────────────
EEPROM_Write_DMA(0x0000, dtc_code, 3);  // 3B WRITE
osDelay(2);                             // t_WR 보장
EEPROM_Read_DMA (0x0000, dtc_code, 3);  // 다시 읽어 검증
osMutexRelease(hMutex);                 // CAN 태스크 깨우기

─────────────────────────────────────────────────────────────
8. Task_CAN
─────────────────────────────────────────────────────────────
HAL_CAN_Start();                               // CAN 컨트롤러 ON
HAL_CAN_ActivateNotification(...RX_FIFO0...);  // 수신 인터럽트 Enable
osMutexAcquire(hMutex);
CAN_SendDTC(dtc_code);                         // ID 0x708, DLC 3
osMutexRelease(hMutex);                        // UART 태스크 깨우기

─────────────────────────────────────────────────────────────
9. Task_UART
─────────────────────────────────────────────────────────────
UART_Log("ECU OK\r\n");  // ST-Link VCP로 상태 메시지
osDelay(100);            // 100 ms 주기

─────────────────────────────────────────────────────────────
10. PMIC_ReadReg_DMA  (I2C DMA 한눈에)
─────────────────────────────────────────────────────────────
HAL_I2C_Mem_Read_DMA();          // 슬레이브 0x90, 레지스터 addr, len 8
while(HAL_I2C_GetState()!=READY) // DMA 끝날 때까지 대기
memcpy(dst->raw, pmic_rx_buf, 8); // 유니온에 복사

─────────────────────────────────────────────────────────────
11. EEPROM SPI 읽기·쓰기 핵심
─────────────────────────────────────────────────────────────
WRITE  : 0x02, addrH, addrL  + 데이터  (Transmit DMA → 대기)
READ   : 0x03, addrH, addrL  + 데이터  (Transmit DMA → Receive DMA)

─────────────────────────────────────────────────────────────
12. CAN 수신 콜백
─────────────────────────────────────────────────────────────
HAL_CAN_GetRxMessage();        // 메시지 꺼내기
if(ID == 0x700 && data[0]==0x14) {
    memset(dtc_code,0,3);      // DTC Clear
    osMutexRelease(hMutex);    // SPI 태스크가 0을 EEPROM에 반영
}
/* 디버그용 로그 찍기 */
snprintf(buf,…,"RX %03lX …",rx.StdId,rx.DLC,data[0],data[1],data[2]);
UART_Log(buf);

─────────────────────────────────────────────────────────────
13. SystemClock_Config  (HSI 16 MHz 단순 클럭)
─────────────────────────────────────────────────────────────
HSI ON → SYSCLK = 16 MHz, AHB/APB 분주비 1, PLL 미사용
(데모라 전압·클럭 계산 복잡도 최소화)

─────────────────────────────────────────────────────────────
14. Error_Handler
─────────────────────────────────────────────────────────────
무한루프로 진입 → 디버거 Breakpoint 걸어 원인 확인용

─────────────────────────────────────────────────────────────
실행 로그 예시 (Loopback 모드)
─────────────────────────────────────────────────────────────
ECU OK
RX 708 [3] 12 34 56
ECU OK
RX 708 [3] 00 00 00   ← 0x700,14 로 Clear 후
ECU OK
…

이렇게 한 줄 한 줄 연결해 보면, 프로그램 전체가
'센서 → 저장 → 전송 → 확인' 사이클을 Mutex 1개로 릴레이하면서 DMA, 인터럽트, 폴링, RTOS를 한 번에 연습하도록 설계되어있다.
